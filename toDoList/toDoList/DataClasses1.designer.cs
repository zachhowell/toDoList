#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace toDoList
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="toDoList")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttoDo(toDo instance);
    partial void UpdatetoDo(toDo instance);
    partial void DeletetoDo(toDo instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::toDoList.Properties.Settings.Default.toDoListConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<toDo> toDos
		{
			get
			{
				return this.GetTable<toDo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.toDo")]
	public partial class toDo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _task;
		
		private System.Nullable<bool> _isComplete;
		
		private int _importance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskChanging(string value);
    partial void OntaskChanged();
    partial void OnisCompleteChanging(System.Nullable<bool> value);
    partial void OnisCompleteChanged();
    partial void OnimportanceChanging(int value);
    partial void OnimportanceChanged();
    #endregion
		
		public toDo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_task", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string task
		{
			get
			{
				return this._task;
			}
			set
			{
				if ((this._task != value))
				{
					this.OntaskChanging(value);
					this.SendPropertyChanging();
					this._task = value;
					this.SendPropertyChanged("task");
					this.OntaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isComplete", DbType="Bit")]
		public System.Nullable<bool> isComplete
		{
			get
			{
				return this._isComplete;
			}
			set
			{
				if ((this._isComplete != value))
				{
					this.OnisCompleteChanging(value);
					this.SendPropertyChanging();
					this._isComplete = value;
					this.SendPropertyChanged("isComplete");
					this.OnisCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_importance", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int importance
		{
			get
			{
				return this._importance;
			}
			set
			{
				if ((this._importance != value))
				{
					this.OnimportanceChanging(value);
					this.SendPropertyChanging();
					this._importance = value;
					this.SendPropertyChanged("importance");
					this.OnimportanceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
